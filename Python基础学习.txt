表示幂运算的方法：
1、2**3
2、pow（2，3）

模块：导入python中以增强其功能的扩展。需要使用特殊的命令import来导入模块。
格式：1、import导入模块
      2、按照模块.函数的格式使用这个模块的函数
如果不希望在每次调用函数的时候都要写上模块的名字可以使用from math import +函数的形式

执行python脚本 python +脚本

#用于注释

python中将值转换为字符串的方法：
1、通过str函数，它会把值转换成合理形式的字符串
2、通过repr创建一个字符串，以合法的python表达式的形式来表示值
3、通过反引号将值转换为合法的python表达式（python3.0以上已经不再使用）

如果需要一个非常长的字符串，需要跨越多行，可以用三个引号代替普通引号，也可以使用三个双引号

列表的各个元素通过逗号分隔，写在方括号中

索引：序列中的所有元素都是有编号的――从0开始递增，可以通过编号分别访问。
分片：可以使用分片操作来访问一定范围内的元算。分片通过冒号相隔的两个索引来实现。分片操作的实现需要提供两个索引作为边界，第一个索引的元素是包含在分片内的，而第2个分片则不包含在分片内。只要分片中最左边的索引比它右边的晚出现在序列中，结果就是一个空序列。

步长：在普通的分片中，步长是1――分片操作就是按照这个步长逐个遍历序列的元素，然后返回开始和结束点之间的所有元素。分片中可以包含步长的显示设置。例如 num[0:10:2]最后一项即显示设置步长为2。步长可以是负数，即葱油到左提取元素。
例：num[8:3:-1].当使用一个负数作为步长时，必须让开始点大于结束点。对于正步长，Python会从序列的头部开始向右提取元素，只到最后一个元素，而对于负步长，则是从序列的尾部开始向左提取元素，只到第一个元素。

序列可以相加（两种相同类型的序列才能进行连接操作）
乘法：用数字x乘以一个序列会生成新的序列，而在新的序列中，原来的序列将被重复x次

空列表可以简单地通过明个中括号进行表示[]――里面什么东西也没有。创建一个占用十个元素空间，却不包括有用内容的列表，可以用None。None是一个Python的内建值。

成员资格：为了检查一个值是否在序列中，可以使用in运算符。这个运算符检查条件是否为真，然后返回相应的值，条件为真返回True，条件为假返回False。

内建函数：len,min,max.len函数返回序列中所包含的元素的数量，min函数和max函数返回序列中最大和最小的元素。

list函数：有时根据字符串创建列表（list函数适用于所有类型的序列）

改变列表：
元素赋值。使用索引标记来为某个特定的、位置明确的元素赋值。
删除元素。适用del语句来实现。
分片赋值。使用分片赋值时可以使用与原序列不等长的序列将分片替换。分片赋值可以在不需要替换任何原有元素的情况下插入新的元素。通过分片赋值来删除元素也是可行的。
例：name=list("perl")
name[2：]=list("ar")
name[1:]=list("ython")
numbers=[1,5]
numbers[1:1]=[2,3,4]
numbers[1:4]=[]

列表方法：方法一般这样被调用：对象.方法（参数）
列表提供的一些方法
1、append 用于在列表末尾追加新的对象。
2、count 统计某个元素在列表中出现的次数
3、extend 可以在列表的末尾一次性追加另一个序列中的多个值。换句话说可以用新列表扩展原有的列表
4、index 用于从列表中找出某个值第一个匹配项的索引位置
5、insert 用于将对象插入到列表中
6、pop 移除列表中的一个元素（默认是最后一个），并且返回该元素的值
7、remove 用于移除列表中某个值的第一个匹配项
8、reverse 将列表中的元素反向存放
9、 用于在原位置对列表进行排序。在原位置排序意味着改变原来的列表，从而让其中的元素按一定的顺序排列，而不是简单地返回一个已排序的列表副本。
获取已排序的列表副本的方法是，使用sorted函数

元组：不可变序列
创建元组的语法是用逗号分隔一些值，自动创建元组。元组大部分时候是通过圆括号括起来。
空元组可以用没有包含内容的两个圆括号来表示。实现包括一个值的元组必须在这个值后面加逗号。

tuple函数的功能与list函数基本上是一样的。以一个序列作为参数并把它转换为元组。

总结：列表是可变的，而元组和字符串是不可变的（一旦创建了就是固定的）

字符串格式化使用字符串格式化操作符即百分号%s来实现。在%的左侧放置一个字符串，右侧放置希望格式化的值。
转换说明符可以包括字段宽度和精度。字段宽度是转换后的值多保留的最小字符个数，精度是结果中应该包含的小数位数或者是转换后的值所能包含的最大字符个数。这两个参数都是整数（首先是字符宽度，然后是精度），通过.分隔。如果只给出精度，必须包含点号。

符号、对齐和0填充：在字段宽度和精度值之前还可以放置一个“标表”，该标表可是零、加号、减号、空格
零表示数字将会用0进行填充。
减号用来左对齐数值
加号表示不管是正数还是负数都标示出符号。

find函数可以在一个较长的字符串中查找子字符串。返回子串所在位置的最左端索引。如果没有找到则返回-1.这个方法还接受可选的起始点和结束点参数。

lower函数返回字符串的小写字母版

replace函数返回某字符串的所有匹配项均被替换之后得到字符串。例：‘This is a test’.replace('is','eez')

split函数 用来将字符串分割成序列。例：'1+2+3+4'.split('+')

strip函数 返回去除两侧（不包括内部）空格的字符串，也可以指定去除两侧的字符

translate函数和replace方法一样 可以替换字符串中的某些部分，但是和replace的不同是translate方法只处理单个字符。它的优势在于可以同时进行多个替换，有些时候比replace效率高得多。

maketrans函数接受两个参数：两个等长的字符串，表示第一个字符串中的每个字符都用第二个字符串中相同位置的字符替换。

字典由多个键和与其对应的值构成的对组成（我们也把键/z值对成为项）。每个键和它的值之间用冒号隔开，项之间用逗号隔开，整个字典是由一对大括号括起来。空字典（不包含任何项）由两个大括号组成。
注：字典中的键是唯一的(其他类型的映射也是如此)，但是值不是唯一的

dict函数。用dict函数，通过其映射（比如其他字典）或者（键、值）这样的序列对建立字典。dict也可以通过关键字参数创建字典

基本字典操作：
len(d)返回d中项的数量
d[k]返回关联到键k上的值
d[k]=v将值v关联到键k上
del d[k]删除键位k的项
k in d检查d中是否有含有键为k的项

尽管字典和列表有很多特性相同，但是也有一些重要的区别：
键类型：字典的键不一定是整型数据，也可能为其他不可变类型。比如浮点型（实型）、字符串或者元组
自动添加：即使那个键起初在字典中并不存在，也可以为它分配一个值，这样字典就会建立新的项。而在不使用append方法或者其他类似操作的情况下不能将值关联到列表范围之外的索引上。
成员资格：表达式k in d查找的是键，而不是值。表达式 k in l则用来查找值，而不是索引。

字典的格式化字符串：如果使用（只以字符串作为键的）字典而不是元组来做这个工作，在每个转换说明符中的%字符后面，可以加上（圆括号括起来的）键，后面再跟上其他说明元素。
