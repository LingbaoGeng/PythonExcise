表示幂运算的方法：
1、2**3
2、pow（2，3）

模块：导入python中以增强其功能的扩展。需要使用特殊的命令import来导入模块。
格式：1、import导入模块
      2、按照模块.函数的格式使用这个模块的函数
如果不希望在每次调用函数的时候都要写上模块的名字可以使用from math import +函数的形式

执行python脚本 python +脚本

#用于注释

python中将值转换为字符串的方法：
1、通过str函数，它会把值转换成合理形式的字符串
2、通过repr创建一个字符串，以合法的python表达式的形式来表示值
3、通过反引号将值转换为合法的python表达式（python3.0以上已经不再使用）

如果需要一个非常长的字符串，需要跨越多行，可以用三个引号代替普通引号，也可以使用三个双引号

列表的各个元素通过逗号分隔，写在方括号中

索引：序列中的所有元素都是有编号的――从0开始递增，可以通过编号分别访问。
分片：可以使用分片操作来访问一定范围内的元算。分片通过冒号相隔的两个索引来实现。分片操作的实现需要提供两个索引作为边界，第一个索引的元素是包含在分片内的，而第2个分片则不包含在分片内。只要分片中最左边的索引比它右边的晚出现在序列中，结果就是一个空序列。

步长：在普通的分片中，步长是1――分片操作就是按照这个步长逐个遍历序列的元素，然后返回开始和结束点之间的所有元素。分片中可以包含步长的显示设置。例如 num[0:10:2]最后一项即显示设置步长为2。步长可以是负数，即葱油到左提取元素。
例：num[8:3:-1].当使用一个负数作为步长时，必须让开始点大于结束点。对于正步长，Python会从序列的头部开始向右提取元素，只到最后一个元素，而对于负步长，则是从序列的尾部开始向左提取元素，只到第一个元素。

序列可以相加（两种相同类型的序列才能进行连接操作）
乘法：用数字x乘以一个序列会生成新的序列，而在新的序列中，原来的序列将被重复x次

空列表可以简单地通过明个中括号进行表示[]――里面什么东西也没有。创建一个占用十个元素空间，却不包括有用内容的列表，可以用None。None是一个Python的内建值。

成员资格：为了检查一个值是否在序列中，可以使用in运算符。这个运算符检查条件是否为真，然后返回相应的值，条件为真返回True，条件为假返回False。

内建函数：len,min,max.len函数返回序列中所包含的元素的数量，min函数和max函数返回序列中最大和最小的元素。

list函数：有时根据字符串创建列表（list函数适用于所有类型的序列）

改变列表：
元素赋值。使用索引标记来为某个特定的、位置明确的元素赋值。
删除元素。适用del语句来实现。
分片赋值。使用分片赋值时可以使用与原序列不等长的序列将分片替换。分片赋值可以在不需要替换任何原有元素的情况下插入新的元素。通过分片赋值来删除元素也是可行的。
例：name=list("perl")
name[2：]=list("ar")
name[1:]=list("ython")
numbers=[1,5]
numbers[1:1]=[2,3,4]
numbers[1:4]=[]

列表方法：方法一般这样被调用：对象.方法（参数）
列表提供的一些方法
1、append 用于在列表末尾追加新的对象。
2、count 统计某个元素在列表中出现的次数
3、extend 可以在列表的末尾一次性追加另一个序列中的多个值。换句话说可以用新列表扩展原有的列表
4、index 用于从列表中找出某个值第一个匹配项的索引位置
5、insert 用于将对象插入到列表中
6、pop 移除列表中的一个元素（默认是最后一个），并且返回该元素的值
7、remove 用于移除列表中某个值的第一个匹配项
8、reverse 将列表中的元素反向存放
9、 用于在原位置对列表进行排序。在原位置排序意味着改变原来的列表，从而让其中的元素按一定的顺序排列，而不是简单地返回一个已排序的列表副本。
获取已排序的列表副本的方法是，使用sorted函数

元组：不可变序列
创建元组的语法是用逗号分隔一些值，自动创建元组。元组大部分时候是通过圆括号括起来。
空元组可以用没有包含内容的两个圆括号来表示。实现包括一个值的元组必须在这个值后面加逗号。

tuple函数的功能与list函数基本上是一样的。以一个序列作为参数并把它转换为元组。

总结：列表是可变的，而元组和字符串是不可变的（一旦创建了就是固定的）

字符串格式化使用字符串格式化操作符即百分号%s来实现。在%的左侧放置一个字符串，右侧放置希望格式化的值。
转换说明符可以包括字段宽度和精度。字段宽度是转换后的值多保留的最小字符个数，精度是结果中应该包含的小数位数或者是转换后的值所能包含的最大字符个数。这两个参数都是整数（首先是字符宽度，然后是精度），通过.分隔。如果只给出精度，必须包含点号。

符号、对齐和0填充：在字段宽度和精度值之前还可以放置一个“标表”，该标表可是零、加号、减号、空格
零表示数字将会用0进行填充。
减号用来左对齐数值
加号表示不管是正数还是负数都标示出符号。

find函数可以在一个较长的字符串中查找子字符串。返回子串所在位置的最左端索引。如果没有找到则返回-1.这个方法还接受可选的起始点和结束点参数。

lower函数返回字符串的小写字母版

replace函数返回某字符串的所有匹配项均被替换之后得到字符串。例：‘This is a test’.replace('is','eez')

split函数 用来将字符串分割成序列。例：'1+2+3+4'.split('+')

strip函数 返回去除两侧（不包括内部）空格的字符串，也可以指定去除两侧的字符

translate函数和replace方法一样 可以替换字符串中的某些部分，但是和replace的不同是translate方法只处理单个字符。它的优势在于可以同时进行多个替换，有些时候比replace效率高得多。

maketrans函数接受两个参数：两个等长的字符串，表示第一个字符串中的每个字符都用第二个字符串中相同位置的字符替换。

python唯一内建的映射类型是字典

字典由多个键和与其对应的值构成的对组成（我们也把键/z值对成为项）。每个键和它的值之间用冒号隔开，项之间用逗号隔开，整个字典是由一对大括号括起来。空字典（不包含任何项）由两个大括号组成。
注：字典中的键是唯一的(其他类型的映射也是如此)，但是值不是唯一的

dict函数。用dict函数，通过其映射（比如其他字典）或者（键、值）这样的序列对建立字典。dict也可以通过关键字参数创建字典

基本字典操作：
len(d)返回d中项的数量
d[k]返回关联到键k上的值
d[k]=v将值v关联到键k上
del d[k]删除键位k的项
k in d检查d中是否有含有键为k的项

尽管字典和列表有很多特性相同，但是也有一些重要的区别：
键类型：字典的键不一定是整型数据，也可能为其他不可变类型。比如浮点型（实型）、字符串或者元组
自动添加：即使那个键起初在字典中并不存在，也可以为它分配一个值，这样字典就会建立新的项。而在不使用append方法或者其他类似操作的情况下不能将值关联到列表范围之外的索引上。
成员资格：表达式k in d查找的是键，而不是值。表达式 k in l则用来查找值，而不是索引。

字典的格式化字符串：如果使用（只以字符串作为键的）字典而不是元组来做这个工作，在每个转换说明符中的%字符后面，可以加上（圆括号括起来的）键，后面再跟上其他说明元素。

字典方法;
1、clear：清除字典中所有的项。无返回值
2、copy：返回一个具有相同键值对的新字典。（这个方法实现的是浅复制）只拷贝父对象，不会拷贝对象的内部的子对象
3、deepcopy深复制：使用深复制，赋值其所包含所有的值。（拷贝对象及其子对象）
4、get：更宽松的访问字典项的方法。当get访问一个不存在的键时，没有任何异常，而得到了None值。还可以自定义“默认”值，替换“None”
5、has_key：检查字典中是否含有给出的键。相当于表达式k in d（Python3.0中不包含这个函数）
6、items和iteritems：items方法将所有的字典项以列表方式返回，这些列表项中的每一个项都来自于（键，值）。但是项在返回时并没有特殊的顺序。
iteritems方法的作用大致相同，但是会返回一个迭代器对象而不是列表。
7、fromkeys：使用给定的键建立新的字典，每个键默认对应的值为None。
8、keys和iterkeys：将字典中的键以列表形式返回，而iterkeys则返回这对键的迭代器
9、pop：获得对应于给定键的值，然后将这个键值对从字典中移除。
10、popitem：弹出随机的项。
11、setdefault：类似于get方法。获得与给定键相关联的值，除此之外还能在字典中不含有给定键的情况下设定相应的键值。
12、update：利用一个字典项更新另外一个字典。提供的字典中的项会被添加到旧的字典中，若有相同的键则会进行覆盖。update可以和映射、拥有键值对的队列或者其他可以迭代的对象以及关键字参数一起调用。
13、values和itervalues：以列表的形式返回字典中的值（itervalues返回值的迭代器）。与返回键的列表不同的是返回值的列表中可以包含重复的元素。

使用print打印表达式――不管是字符串还是其他类型进行自动转换后的字符串，事实上打印多个表达式也是可行的，只要将它们用逗号隔开就好。如果在结尾处加上逗号，那么接下来的语句会与前一条语句在同一行打印。
例:print "Hello,",
   print "World!" 输出Hello World！

把某事件作为另一个事导入
import somemodule
from somemodule import somefunction
from somemodule import somefunction,anotherfunction,yetanotherfunction
from somemodule import *
在语句末尾增加一个as子句，在该子句后给出名字，或为整个模块提供别名。
例;import math as foobar 
   foobar.sqrt(4)
也可以为函数提供别名。例：from math import sqrt as foobar 

语句块是在条件为真时执行多次的一组语句。在代码前置空格来缩进语句即可创建语句块。块中的每行都应该缩进同样的量。冒号用来标识语句块的开始，块中的每一个语句都是缩进的，当回退到和已经闭合的块一样的缩进量时，就表示当前快已经结束了。

下面的值作为布尔表达式的时候会被解释成假(False)：False None 0 "" () [] {}

使用==运算符判定两个对象是否相等，使用is判定两者是否等同（同一个对象）

布尔运算符;and or not

断言：关键字assert。与其让程序在晚些时候奔溃，不如在错误条件出现时直接让它奔溃。assert可以在程序中置入检查点，条件后可以添加字符串，用来解释断言。

内建的zip函数可以用来进行并行迭代，可以把两个序列“压缩”在一起，然后返回一个元组的列表。zip函数也可以作用于任意多的序，重要的一点是zip可以应付不等长的学列，当最短的序列用完的时候会停止。

翻转和排序迭代：reversed和sorted，作用于任何序列或可迭代对象上，不是原地修改对象，而是返回翻转或排序后的版本。

break：结束（跳出）循环
continue：让当前的迭代结束，跳到下一轮循环的开始。（跳过剩余的循环体，但是不结束循环）

使用def或函数定义语句创建函数。
例：def hello(name):
	return "Hello,"+name+"!"

Python中用默认值声明变量的语法是所有的位置参数必须出现在任何一个默认参数之前

Python允许用lambda关键字创建匿名函数，一个完整的lambda语句代表了一个表达式，这个表达式的定义必须和声明放在同一行。用lambda创建一个函数对象，为了留住这个对象，我们将它保存在一个变量中，以便以后可以随时调用。例：def add(x,y):return x+y <=>lambda x,y:x+y


函数式编程的内建函数：
apply(func[,nkw],[,kw]) 用可选的参数来调用func，nkw为非关键字参数，kw为关键字参数，返回值为函数调用的返回值。
filter(func,seq) 调用一个布尔函数func来迭代遍历每个seq中的元素，返回一个使func返回值为True的元素序列
map(func,swq1[,seq2]) 将函数func作用于给定序列（s）的每个元素，并用一个列表来提供返回值，如果func为None，func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组的序列。
reduce(func,seq[,init]) 将二元函数作用于seq序列的元素，每次携带一对（先前的结果以及下一个序列元素），连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值，如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素。

新式类的语法中，需要在模块或者脚本开始的地方放置赋值语句__metaclass__=type
为了让方法或者特性变为私有（从外部无法访问），只要在它的名字前面加上双下划线即可。类的内部定义中，所有以双下划线开始的名字都被翻译成前面加上单下划线和类名的形式。

类作用域内的变量可以被所有实例访问。

子类继承父类，父类类名写在class语句后的圆括号内以指定子类的父类。

查看一个类是否是另一个的子类，可以使用内建的issubclass函数。例：issubclass(A,B)
使用isinstance方法检查一个对象是否是一个类的实例。例：isinstance(object,className)

创建自己的异常类――确保从Exception类继承。可以处理异常（通常叫做诱捕或者捕捉异常），这个功能可以使用try/except来实现。

finally子句肯定会被执行，不管try子句中是否发生异常。

在python中创建一个构造方法：__init__

生成器是由两部分组成：生成器的函数和生成器的迭代器。生成器的函数是用def语句定义的，包含yield部分，生成器的迭代器是这个函数返回的部分。
一个带有yield的函数就是一个gennerator，它和普通的函数不同，生成一个generator看起来像函数调用，但不会执行任何函数代码，直到对其调用next（）才开始执行。每执行到一个yield语句就会中断，并返回一个迭代值，下次执行时从yield的下一个语句继续执行。


字符集：使用中括号括住字符串来创建字符集。例：[a-zA-Z0-9]能够匹配任意大小写字母和数字。为了反转字符集可以在开头使用^字符。例：[^abc]可以匹配任何除了a、b、c之外的字符。
在字符串的每个字符都各不相同的情况下，字符集是很好用的，但是如果只想匹配字符串就不能使用字符集或者通配符来指定某个特定的模式了。要用选择项的特殊字符：管道符号|。例：'python|perl'有些时候不需要对整个模式使用选择运算符――只是模式的一部分。这时可用圆括号括起需要的部分，或称子模式。例：‘p(ython|erl)’
在子模式后面加上问号，就变成了可选项。它可能出现在匹配字符串中，但并非必需的。例:r'(http://)?(www\.)?python\.org'

只想在字符串的开头而不是其他位置匹配子字符串，可以使用脱字符^标记开始。例：'^ht+p'.类似的字符串结尾用美元符号$标识。

打开文件：open(name[,mode[,buffering]])
open函数使用一个文件名作为唯一的强制参数，返回一个文件对象。模式和缓冲区参数是可选的。

在文件中随意移动读取位置是可以的，可以使用类文件对象seek和tell来直接访问感兴趣的部分（这种做法称为随机访问）
seek有三种模式：
f.seek(p,0)：移动当文件第p个字节处，绝对位置。
f.seek(p,1)：移动到相对于当前位置之后的p个字节
f.seek(p,2)：移动到相对于文章尾之后的p个字节

tell函数：返回文件读取指针的位置。

f.readline()：读取单独的一行（从当前的位置开始直到一个换行符出现，也读取这个换行符），或者使用一个非负的整数作为readline可以读取的字符或者字节的最大值。
f.readlines()：读取一个文件中的所有行并将其作为列表返回。
f.writelines()：传给一个字符串的列表（实际上任何序列或者可迭代的对象都行），它会把所有的字符串写入文件（或流）注意：程序不会增加新行，需要自己添加。

with open("somefile.txt") as somefile:
	do_something(somefile)
with语句可以打开文件并且将其赋值到变量上。之后可以将数据写入语句体中的文件。文件在语句结束后会被自动关闭，即使是由于异常引起的结束也是如此。

为了使用基础数据库系统，首先必须连接到它。需要使用connect函数。该函数返回连接对象，这个对象表示目前和数据库的会话。

一个套接字就是一个socket模块中的socket类的实例。它的实例化需要3个参数：第一个参数是地址族（默认是socket.AF_INET）第二个参数是流（默认是socket.SOCK_STREAM）或数据报(socket.SOCK_DGRAM)第三个参数是使用的协议（默认是0，使用默认值即可）。对于一个普通的套接字，不需要提供任何参数。

使用socket.socket(socket_family,socket_type,protocol=0)
服务器端套接字函数：
1、s.bind() 绑定地址（主机名、端口号对）到套接字
2、s.listen() 开始监听TCP
3、s.accept() 被动接受TCP客户端连接，（阻塞式）等待连接到来

客户端套接字函数：
1、s.connect() 主动初始化TCP服务器连接
2、s.connect_ex() connect函数的扩展版本，出错时返回出错码，而不是抛出异常

公共用途的套接字函数：
1、s.recv() 接受TCP数据
2、s.send() 发送TCP数据
3、s.sendall() 完整发送TCP数据
4、s.recvfrom() 接收UDP数据
5、s.sendto() 发送UDP数据
6、s.getpeername() 连接到当前套接字的远端地址（TCP连接）
7、s.getsockname() 当前套接字的地址
8、s.getsockopt() 返回指定套接字的参数
9、s.setsockopt() 设置指定套接字的参数
10、s.close()  关闭套接字

使用socket.gethostname()可以得到当前主机名。在这种情况下，一个地址就是一个格式为(host,port)的元组。

服务器段套接字使用bind方法后，再调用listen方法去监听这个给定的地址。客户端套接字使用connect方法连接到服务器在connect方法中使用的地址与bind方法中的地址相同。listen方法中只有一个参数，即服务器未处理的连接的长度。服务器端套接字开始监听后就可以接受客户端的连接。这个步骤使用accept方法来完成。这个方法会阻塞（等待）直到客户端连接，然后该方法返回一个格式为（client,address）的元组。client是一个客户端套接字，address是一个(host,port)的元组。

套接字有两个方法：send和recv（用于接收），用于传输数据。可以使用字符串参数调用send已发送数据，用一个所需的最大字节数作为参数调用recv来接收数据。如果不确定使用哪个数字比较好，那么1024是个很好的选择。

socketServer模块：是标准库中一个高级别的模块，用于简化实现网络客户端与服务器所需的大量样板代码。
SocketServer模块的类：
1、BaseServer：包含服务器的核心功能与混合（mix-in）类挂钩，这个类只用于派生，不会生成这个类的实例
2、TCPServer/UDPServer：基本的网络同步TCP/UDP服务器
3、ForkingMixIn/ThreadingMixIn：实现了核心的进程化或者线程化的功能，作为混合类，与服务器类一并使用以提供一些异步特性，这个类不会直接实例化
4、ForkingTCPServer/ThreadingUDPServer：ForkingMixIn和TCPServer/UDPServer的组合
5、ThreadingTCPServer/ThreadingUDPServer:ThreadingMixIn和TCPServer/UDPServer的组合
6、BaseRequestHandler：包含处理服务请求的核心功能。这个类只用于派生，不会生成这个类的实例。可与考虑使用StreamRequestHandler/DatagramRequestHandler
7、StreamRequestHandler/DatagramRequestHandler：用于TCP/UDP服务器的服务处理工具。


thread模块和锁对象：
start_new_thread(function,args,kwargs=None) 产生一个新的线程，在新线程中用指定的参数和可选的kwargs来电泳这个函数
allocate_lock（） 分配一个LockType类型的锁对象
exit（） 让线程退出
LockType类型锁对象方法：
acquire（wait=None） 尝试获取锁对象
locked（） 如果获取了锁对象返回True，否则返回False
release（） 释放锁

threading模块对象：
Thread 表示一个线程的执行的对象
Lock 锁原语对象（跟thread里的锁对象相同）
RLock 可重入锁对象。使单线程可以再次获得已经获得了的锁（递归锁定）
Condition 条件变量能让一个线程停下来，等待其他线程满足了某个条件。如状态改变或值的改变
Event 通用的条件变量。多个线程可以等待某个事件的发生，在事件发生后，所有的线程都被激活
Semaphore 为等待锁的线程提供一个类似等候室的结构
BounderSemaphore 与Semaphore类似，只是它不允许超过初始值
Timer 与Thread相似，只是要等待一段时间后开始运行。
 
用Thread类创建线程：
1、创建一个Thread的实例，传给它一个函数
2、创建一个Thread的实例，传给它一个可调用的类对象
3、从Thread派生出一个子类，创建一个这个子类的实例。
函数：
start() 开始线程的执行
run() 定义线程的功能的函数（一般会被子类重写）
join(timeout=None) 程序挂起，直到线程结束，如果给了timeout，则最多阻塞timeout秒
getName() 返回线程的名字
setName() 设置线程的名字
isAlive() 布尔标志，表示这个线程是否还在运行中
isDaemon() 返回线程的daemon标志
setDaemon(daemonic) 把线程的daemon标志位daemonic(一定要在调用start（）函数之前调用)

打开远程文件：使用来自urllib模块的urlopen。返回一个链接到网页的类文件对象。这个类文件支持close、read、readline、readlines方法，也支持迭代。

获取远程文件：使用urlretrieve下载文件并在本地文件中存储一个文件的副本。urltrieve返回一个元组(filename,headers),如果要为下载的副本指定文件名，可以在urlretrieve函数的第2个参数中给出。
例：urlretrieve("http://www.python.org","c:\\python_webpage.html")如果没有指定文件名，文件就会放在临时的位置，用open函数可以打开，如果完成对它的操作，调用urlcleanup函数，不要提供参数，该函数负责清理工作。

有三种方法可以试想处理多个连接：分叉（forking）、线程（threading）、异步I/O（asynchronous I/O）

beautifullsoup分析html
Beautiful Soup是用python写的一个HTML/XML的解释器，它可以很好的处理不规范标记并生成剖析树。
导入Beautiful Soup的导入：
from BeautifulSoup import BeautifulSoup   #for processing HTML
from BeautifulSoup import BeautifulStoneSoup #for processing XML
import BeautifulSoup    #to get everything

0、初始化：
soup=BeautifulSoup(html) #html为html源代码字符串 type(html)=str

1、用tag获取相应代码块的剖析树：
#当用tag作为搜索条件时，我们获取的包含这个tag块的剖析树：
#<tag><xxx>ooo</xxx></tag>
#这里以获取head为例
head=soup.find("head")
or head=soup.head
or head=soup.contents[0].contents[0]
contents属性是一个列表，里面保存了该剖析树的直接儿子。
html=soup.contents[0] #<html>......</html>
head=html.contents[0] #<head>......</head>
body=html.contents[1] #<body>......</body>

2、用contents[]，parent,next_sibling,previous_sibling寻找父子兄弟tag。
body=soup.body
html=body.parent #html是body的父亲
head=body.previous_sibling #head和body在同一层，是body的前一个兄弟
p1=body.contents[0]  #p1,p2都是body的儿子，我们用contents[0]取得p1
p2=p1.next_sibling #p2和p1在同一层，是p1的后一个兄弟，当然用body.contents[1]也可以得到

3、用find()，find_parent()，find_next_sibling()，find_previous_sibling()寻找祖先或者子孙tag。
find方法是以当前节点为开始，遍历整个子树，找到后返回。这些方法的复数形式，会找到所有符合要求的tag，以list的方式返回。
对应关系:find->findall，find_parent->find_parents，find_next_sibling->find_next_siblings...
find的几种用法(其它的类比)：
find(name=None,arrts={},recursive=True,text=None,limit,**kwargs)
搜索tag：
find(tagname) #直接搜索名为tagname的tag
find(list) #搜索在list中的tag，如find(["head","body"])
find(dict) #搜索在dict中的tag,如find({"head":True,"body":True})
find(re.compile(""))  #搜索符合正规的tag，如find(re.compile("^p"))搜索以p开头的tag
find(True)  #搜索所有的tag
find(lambda)  #搜索函数返回结果为true的tag，如find(lambda name:if len(name)==1)搜索长度为1的tag
搜索属性（arrts）
find(id='xxx')  #寻找id属性为xxx的
find(attrs={id=re.compile("xxx"),algin="xxx"}) #寻找id属性符合正则且algin属性为xxx的
find(attrs={id=True,algin=None})  #寻找id操作但是没有algin属性的
搜索文字（text）：
注意，文字的搜索会导致其他搜索给的值如：tag、attrs都失效，方法与搜索attrs一致。
recursive、limit：
当recursive=False表示只搜索直接儿子，否则搜索整个子树，默认为True
当使用findAll或者类似返回list的方法时，limit属性用于限制返回的数量。如findAll("p",limit=2)返回首先找到的两个tag

soup.prettify()规范化html，包括缩进和自动闭合部分标签